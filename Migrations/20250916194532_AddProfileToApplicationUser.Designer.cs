// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MinhaSaudeFeminina.Data;

#nullable disable

namespace MinhaSaudeFeminina.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250916194532_AddProfileToApplicationUser")]
    partial class AddProfileToApplicationUser
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MinhaSaudeFeminina.Models.Catalogs.Gender", b =>
                {
                    b.Property<int>("GenderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GenderId"));

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GenderId");

                    b.HasIndex("TagId");

                    b.ToTable("Genders");
                });

            modelBuilder.Entity("MinhaSaudeFeminina.Models.Catalogs.Objective", b =>
                {
                    b.Property<int>("ObjectiveId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ObjectiveId"));

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("ObjectiveId");

                    b.HasIndex("TagId");

                    b.ToTable("Objectives");
                });

            modelBuilder.Entity("MinhaSaudeFeminina.Models.Catalogs.Status", b =>
                {
                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StatusId"));

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("StatusId");

                    b.HasIndex("TagId");

                    b.ToTable("Statuses");
                });

            modelBuilder.Entity("MinhaSaudeFeminina.Models.Catalogs.Symptom", b =>
                {
                    b.Property<int>("SymptomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SymptomId"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("SymptomId");

                    b.ToTable("Symptoms");
                });

            modelBuilder.Entity("MinhaSaudeFeminina.Models.Catalogs.Tag", b =>
                {
                    b.Property<int>("TagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TagId"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("TagId");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("MinhaSaudeFeminina.Models.Relations.ProfileGender", b =>
                {
                    b.Property<int>("ProfileId")
                        .HasColumnType("int");

                    b.Property<int>("GenderId")
                        .HasColumnType("int");

                    b.HasKey("ProfileId", "GenderId");

                    b.HasIndex("GenderId");

                    b.ToTable("ProfileGenders");
                });

            modelBuilder.Entity("MinhaSaudeFeminina.Models.Relations.ProfileObjective", b =>
                {
                    b.Property<int>("ProfileId")
                        .HasColumnType("int");

                    b.Property<int>("ObjectiveId")
                        .HasColumnType("int");

                    b.HasKey("ProfileId", "ObjectiveId");

                    b.HasIndex("ObjectiveId");

                    b.ToTable("ProfileObjectives");
                });

            modelBuilder.Entity("MinhaSaudeFeminina.Models.Relations.ProfileStatus", b =>
                {
                    b.Property<int>("ProfileId")
                        .HasColumnType("int");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("ProfileId", "StatusId");

                    b.HasIndex("StatusId");

                    b.ToTable("ProfileStatuses");
                });

            modelBuilder.Entity("MinhaSaudeFeminina.Models.Relations.ProfileSymptom", b =>
                {
                    b.Property<int>("ProfileId")
                        .HasColumnType("int");

                    b.Property<int>("SymptomId")
                        .HasColumnType("int");

                    b.HasKey("ProfileId", "SymptomId");

                    b.HasIndex("SymptomId");

                    b.ToTable("ProfileSymptoms");
                });

            modelBuilder.Entity("MinhaSaudeFeminina.Models.Relations.TagGender", b =>
                {
                    b.Property<int>("TagGenderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TagGenderId"));

                    b.Property<int>("GenderId")
                        .HasColumnType("int");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.HasKey("TagGenderId");

                    b.HasIndex("GenderId");

                    b.HasIndex("TagId");

                    b.ToTable("TagGenders");
                });

            modelBuilder.Entity("MinhaSaudeFeminina.Models.Relations.TagObjective", b =>
                {
                    b.Property<int>("TagObjectiveId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TagObjectiveId"));

                    b.Property<int>("ObjectiveId")
                        .HasColumnType("int");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.HasKey("TagObjectiveId");

                    b.HasIndex("ObjectiveId");

                    b.HasIndex("TagId");

                    b.ToTable("TagObjectives");
                });

            modelBuilder.Entity("MinhaSaudeFeminina.Models.Relations.TagStatus", b =>
                {
                    b.Property<int>("TagStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TagStatusId"));

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.HasKey("TagStatusId");

                    b.HasIndex("StatusId");

                    b.HasIndex("TagId");

                    b.ToTable("TagStatuses");
                });

            modelBuilder.Entity("MinhaSaudeFeminina.Models.Relations.TagSymptom", b =>
                {
                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.Property<int>("SymptomId")
                        .HasColumnType("int");

                    b.HasKey("TagId", "SymptomId");

                    b.HasIndex("SymptomId");

                    b.ToTable("TagSymptoms");
                });

            modelBuilder.Entity("MinhaSaudeFeminina.Models.User.ApplicationUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("MinhaSaudeFeminina.Models.UserProfile.Profile", b =>
                {
                    b.Property<int>("ProfileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProfileId"));

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Term")
                        .HasColumnType("bit");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ProfileId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Profiles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("MinhaSaudeFeminina.Models.User.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("MinhaSaudeFeminina.Models.User.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MinhaSaudeFeminina.Models.User.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("MinhaSaudeFeminina.Models.User.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MinhaSaudeFeminina.Models.Catalogs.Gender", b =>
                {
                    b.HasOne("MinhaSaudeFeminina.Models.Catalogs.Tag", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("MinhaSaudeFeminina.Models.Catalogs.Objective", b =>
                {
                    b.HasOne("MinhaSaudeFeminina.Models.Catalogs.Tag", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("MinhaSaudeFeminina.Models.Catalogs.Status", b =>
                {
                    b.HasOne("MinhaSaudeFeminina.Models.Catalogs.Tag", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("MinhaSaudeFeminina.Models.Relations.ProfileGender", b =>
                {
                    b.HasOne("MinhaSaudeFeminina.Models.Catalogs.Gender", "Gender")
                        .WithMany("ProfileGenders")
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MinhaSaudeFeminina.Models.UserProfile.Profile", "Profile")
                        .WithMany("ProfileGenders")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Gender");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("MinhaSaudeFeminina.Models.Relations.ProfileObjective", b =>
                {
                    b.HasOne("MinhaSaudeFeminina.Models.Catalogs.Objective", "Objective")
                        .WithMany("ProfileObjectives")
                        .HasForeignKey("ObjectiveId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MinhaSaudeFeminina.Models.UserProfile.Profile", "Profile")
                        .WithMany("ProfileObjectives")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Objective");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("MinhaSaudeFeminina.Models.Relations.ProfileStatus", b =>
                {
                    b.HasOne("MinhaSaudeFeminina.Models.UserProfile.Profile", "Profile")
                        .WithMany("ProfileStatuses")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MinhaSaudeFeminina.Models.Catalogs.Status", "Status")
                        .WithMany("ProfileStatuses")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Profile");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("MinhaSaudeFeminina.Models.Relations.ProfileSymptom", b =>
                {
                    b.HasOne("MinhaSaudeFeminina.Models.UserProfile.Profile", "Profile")
                        .WithMany("ProfileSymptoms")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MinhaSaudeFeminina.Models.Catalogs.Symptom", "Symptom")
                        .WithMany("ProfileSymptoms")
                        .HasForeignKey("SymptomId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Profile");

                    b.Navigation("Symptom");
                });

            modelBuilder.Entity("MinhaSaudeFeminina.Models.Relations.TagGender", b =>
                {
                    b.HasOne("MinhaSaudeFeminina.Models.Catalogs.Gender", "Gender")
                        .WithMany()
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MinhaSaudeFeminina.Models.Catalogs.Tag", "Tag")
                        .WithMany("TagGenders")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Gender");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("MinhaSaudeFeminina.Models.Relations.TagObjective", b =>
                {
                    b.HasOne("MinhaSaudeFeminina.Models.Catalogs.Objective", "Objective")
                        .WithMany()
                        .HasForeignKey("ObjectiveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MinhaSaudeFeminina.Models.Catalogs.Tag", "Tag")
                        .WithMany("TagObjectives")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Objective");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("MinhaSaudeFeminina.Models.Relations.TagStatus", b =>
                {
                    b.HasOne("MinhaSaudeFeminina.Models.Catalogs.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MinhaSaudeFeminina.Models.Catalogs.Tag", "Tag")
                        .WithMany("TagStatuses")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Status");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("MinhaSaudeFeminina.Models.Relations.TagSymptom", b =>
                {
                    b.HasOne("MinhaSaudeFeminina.Models.Catalogs.Symptom", "Symptom")
                        .WithMany("TagSymptoms")
                        .HasForeignKey("SymptomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MinhaSaudeFeminina.Models.Catalogs.Tag", "Tag")
                        .WithMany("TagSymptoms")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Symptom");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("MinhaSaudeFeminina.Models.UserProfile.Profile", b =>
                {
                    b.HasOne("MinhaSaudeFeminina.Models.User.ApplicationUser", "User")
                        .WithOne("Profile")
                        .HasForeignKey("MinhaSaudeFeminina.Models.UserProfile.Profile", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MinhaSaudeFeminina.Models.Catalogs.Gender", b =>
                {
                    b.Navigation("ProfileGenders");
                });

            modelBuilder.Entity("MinhaSaudeFeminina.Models.Catalogs.Objective", b =>
                {
                    b.Navigation("ProfileObjectives");
                });

            modelBuilder.Entity("MinhaSaudeFeminina.Models.Catalogs.Status", b =>
                {
                    b.Navigation("ProfileStatuses");
                });

            modelBuilder.Entity("MinhaSaudeFeminina.Models.Catalogs.Symptom", b =>
                {
                    b.Navigation("ProfileSymptoms");

                    b.Navigation("TagSymptoms");
                });

            modelBuilder.Entity("MinhaSaudeFeminina.Models.Catalogs.Tag", b =>
                {
                    b.Navigation("TagGenders");

                    b.Navigation("TagObjectives");

                    b.Navigation("TagStatuses");

                    b.Navigation("TagSymptoms");
                });

            modelBuilder.Entity("MinhaSaudeFeminina.Models.User.ApplicationUser", b =>
                {
                    b.Navigation("Profile");
                });

            modelBuilder.Entity("MinhaSaudeFeminina.Models.UserProfile.Profile", b =>
                {
                    b.Navigation("ProfileGenders");

                    b.Navigation("ProfileObjectives");

                    b.Navigation("ProfileStatuses");

                    b.Navigation("ProfileSymptoms");
                });
#pragma warning restore 612, 618
        }
    }
}
